// Script para probar el problema sin tel√©fono vs con tel√©fono
const axios = require('axios');

async function testSinTelefono() {
  console.log('üìû PROBANDO: SIN TEL√âFONO vs CON TEL√âFONO\n');
  
  try {
    // 1. Probar SIN tel√©fono (donde aparec√≠a "carlos")
    console.log('1Ô∏è‚É£ Probando SIN tel√©fono...');
    
    const sinTelefono = {
      clientName: 'alfredo',
      clientEmail: 'alfredo@test.com',
      clientPhone: '', // Vac√≠o
      serviceId: 'cmbnphqvp0001qh0i2tn1anxw',
      startTime: '2025-06-15T14:00:00.000Z',
      notes: 'Test sin tel√©fono - debe mostrar alfredo',
      professionalId: null
    };
    
    console.log('üìù Datos SIN tel√©fono:');
    console.log(JSON.stringify(sinTelefono, null, 2));
    
    try {
      const responseSin = await axios.post(
        'https://turnio-backend-production.up.railway.app/api/public/cdfa/book',
        sinTelefono
      );
      
      console.log('‚úÖ Respuesta SIN tel√©fono:');
      console.log(JSON.stringify(responseSin.data, null, 2));
      
      const nombreSin = responseSin.data.data?.clientName;
      console.log(`\nüé≠ SIN TEL√âFONO - Enviado: "alfredo", Recibido: "${nombreSin}"`);
      
      if (nombreSin === 'alfredo') {
        console.log('‚úÖ ¬°CORRECTO! Sin tel√©fono funciona');
      } else {
        console.log(`‚ùå PROBLEMA: Esperaba "alfredo" pero obtuve "${nombreSin}"`);
      }
      
    } catch (error) {
      console.log('‚ùå Error sin tel√©fono:', error.response?.data);
    }
    
    // 2. Probar CON tel√©fono (donde funcionaba bien)
    console.log('\n2Ô∏è‚É£ Probando CON tel√©fono...');
    
    const conTelefono = {
      clientName: 'alfredo',
      clientEmail: 'alfredo@test.com',
      clientPhone: '+54 9 11 1234-5678',
      serviceId: 'cmbnphqvp0001qh0i2tn1anxw',
      startTime: '2025-06-16T14:00:00.000Z',
      notes: 'Test con tel√©fono - debe mostrar alfredo',
      professionalId: null
    };
    
    console.log('üìù Datos CON tel√©fono:');
    console.log(JSON.stringify(conTelefono, null, 2));
    
    try {
      const responseCon = await axios.post(
        'https://turnio-backend-production.up.railway.app/api/public/cdfa/book',
        conTelefono
      );
      
      console.log('‚úÖ Respuesta CON tel√©fono:');
      console.log(JSON.stringify(responseCon.data, null, 2));
      
      const nombreCon = responseCon.data.data?.clientName;
      console.log(`\nüé≠ CON TEL√âFONO - Enviado: "alfredo", Recibido: "${nombreCon}"`);
      
      if (nombreCon === 'alfredo') {
        console.log('‚úÖ ¬°CORRECTO! Con tel√©fono funciona');
      } else {
        console.log(`‚ùå PROBLEMA: Esperaba "alfredo" pero obtuve "${nombreCon}"`);
      }
      
    } catch (error) {
      console.log('‚ùå Error con tel√©fono:', error.response?.data);
    }
    
    // 3. Probar solo con email √∫nico (sin tel√©fono)
    console.log('\n3Ô∏è‚É£ Probando con email √∫nico sin tel√©fono...');
    
    const emailUnico = {
      clientName: 'CLIENTE-UNICO',
      clientEmail: `unico-${Date.now()}@test.com`,
      clientPhone: null, // Expl√≠citamente null
      serviceId: 'cmbnphqvp0001qh0i2tn1anxw',
      startTime: '2025-06-17T14:00:00.000Z',
      notes: 'Test email √∫nico sin tel√©fono',
      professionalId: null
    };
    
    console.log('üìù Datos email √∫nico:');
    console.log(JSON.stringify(emailUnico, null, 2));
    
    try {
      const responseUnico = await axios.post(
        'https://turnio-backend-production.up.railway.app/api/public/cdfa/book',
        emailUnico
      );
      
      console.log('‚úÖ Respuesta email √∫nico:');
      console.log(JSON.stringify(responseUnico.data, null, 2));
      
      const nombreUnico = responseUnico.data.data?.clientName;
      console.log(`\nüé≠ EMAIL √öNICO - Enviado: "CLIENTE-UNICO", Recibido: "${nombreUnico}"`);
      
    } catch (error) {
      console.log('‚ùå Error email √∫nico:', error.response?.data);
    }
    
    console.log('\nüìã RESUMEN DEL TEST:');
    console.log('   Este test confirma si el problema del "carlos" se solucion√≥');
    console.log('   al arreglar la l√≥gica de b√∫squeda por tel√©fono vac√≠o.');
    
  } catch (error) {
    console.error('‚ùå Error general:', error.message);
  }
}

testSinTelefono(); 