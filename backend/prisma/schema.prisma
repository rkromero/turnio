// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Business {
  id              String   @id @default(cuid())
  name            String
  email           String   @unique
  slug            String   @unique
  planType        PlanType @default(FREE)
  maxAppointments Int      @default(30)
  logo            String?
  phone           String?
  address         String?
  description     String?
  primaryColor    String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relaciones
  users        User[]
  services     Service[]
  clients      Client[]
  appointments Appointment[]
  holidays     Holiday[]
  reviews      Review[]

  @@map("businesses")
}

model User {
  id         String   @id @default(cuid())
  businessId String
  name       String
  email      String   @unique
  password   String
  role       UserRole @default(EMPLOYEE)
  isActive   Boolean  @default(true)
  avatar     String?
  phone      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relaciones
  business     Business       @relation(fields: [businessId], references: [id], onDelete: Cascade)
  appointments Appointment[]
  workingHours WorkingHours[]

  @@map("users")
}

model Service {
  id          String   @id @default(cuid())
  businessId  String
  name        String
  description String?
  duration    Int // duración en minutos
  price       Float
  isActive    Boolean  @default(true)
  color       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relaciones
  business     Business      @relation(fields: [businessId], references: [id], onDelete: Cascade)
  appointments Appointment[]

  @@map("services")
}

model Client {
  id         String   @id @default(cuid())
  businessId String
  name       String
  email      String?
  phone      String?
  notes      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relaciones
  business     Business      @relation(fields: [businessId], references: [id], onDelete: Cascade)
  appointments Appointment[]
  reviews      Review[]

  @@map("clients")
}

model Appointment {
  id           String            @id @default(cuid())
  businessId   String
  clientId     String
  serviceId    String
  userId       String? // profesional asignado (opcional)
  startTime    DateTime
  endTime      DateTime
  status       AppointmentStatus @default(CONFIRMED)
  notes        String?
  reminderSent Boolean           @default(false)
  reviewRequestSent Boolean      @default(false)
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt

  // Relaciones
  business Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  client   Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  service  Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  user     User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  review   Review?

  @@map("appointments")
}

model WorkingHours {
  id        String  @id @default(cuid())
  userId    String
  dayOfWeek Int // 0=Domingo, 1=Lunes, ..., 6=Sábado
  startTime String // HH:MM formato
  endTime   String // HH:MM formato
  isActive  Boolean @default(true)

  // Relaciones - Solo con User, no con Business
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, dayOfWeek])
  @@map("working_hours")
}

model Holiday {
  id          String   @id @default(cuid())
  businessId  String
  name        String
  date        DateTime
  isRecurring Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relaciones
  business Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@map("holidays")
}

model Review {
  id            String   @id @default(cuid())
  businessId    String
  clientId      String
  appointmentId String   @unique
  rating        Int      // 1-5 estrellas
  comment       String?
  isPublic      Boolean  @default(true)
  isApproved    Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relaciones
  business    Business    @relation(fields: [businessId], references: [id], onDelete: Cascade)
  client      Client      @relation(fields: [clientId], references: [id], onDelete: Cascade)
  appointment Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)

  @@map("reviews")
}

// Sistema de Scoring de Clientes Global
model ClientScore {
  id            String   @id @default(cuid())
  email         String?  // Identificador primario
  phone         String?  // Identificador secundario
  name          String   // Último nombre usado
  totalPoints   Float    @default(0) // Puntos acumulados con ponderación
  totalWeight   Float    @default(0) // Peso total para calcular promedio
  starRating    Int?     // 1-5 estrellas calculadas
  totalBookings Int      @default(0) // Total de reservas
  attendedCount Int      @default(0) // Citas a las que asistió
  noShowCount   Int      @default(0) // No-shows
  lastActivity  DateTime @default(now()) // Última actividad
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relaciones
  history ClientHistory[]

  @@unique([email])
  @@unique([phone])
  @@map("client_scores")
}

// Historial detallado de eventos de cliente
model ClientHistory {
  id             String              @id @default(cuid())
  clientScoreId  String
  businessId     String             // Para referencia (sin relación directa)
  appointmentId  String             // Para referencia
  eventType      ClientEventType
  points         Float              // Puntos otorgados/descontados
  weight         Float              // Peso de este evento
  notes          String?            // Notas adicionales
  eventDate      DateTime           // Fecha del evento
  createdAt      DateTime           @default(now())

  // Relaciones
  clientScore ClientScore @relation(fields: [clientScoreId], references: [id], onDelete: Cascade)

  @@map("client_history")
}

// Enums
enum PlanType {
  FREE
  BASIC
  PREMIUM
  ENTERPRISE
}

enum UserRole {
  ADMIN
  EMPLOYEE
}

enum AppointmentStatus {
  CONFIRMED
  CANCELLED
  NO_SHOW
  COMPLETED
}

enum ClientEventType {
  ATTENDED       // Asistió a la cita
  NO_SHOW        // No se presentó
  CANCELLED_LATE // Canceló tarde (< 24h)
  CANCELLED_GOOD // Canceló con tiempo (> 24h)
}
