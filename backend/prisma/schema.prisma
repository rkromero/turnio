// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Business {
  id              String       @id @default(cuid())
  name            String
  email           String       @unique
  slug            String       @unique
  planType        PlanType     @default(FREE)
  maxAppointments Int          @default(30)
  logo            String?
  phone           String?
  address         String?
  description     String?
  primaryColor    String?
  businessType    BusinessType @default(GENERAL)
  defaultAppointmentDuration Int @default(60) // Duración en minutos
  
  // Configuración de MercadoPago
  mp_access_token String?
  mp_refresh_token String?
  mp_user_id String?
  mp_public_key String?
  mp_connected Boolean @default(false)
  mp_connected_at DateTime?
  
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  // Relaciones
  branches     Branch[]
  users        User[]
  services     Service[]
  clients      Client[]
  appointments Appointment[]
  holidays     Holiday[]
  reviews      Review[]
  subscription Subscription?
  planChanges  PlanChange[]
  appointmentPayments AppointmentPayment[] // Pagos de citas individuales
  paymentSettings PaymentSettings?

  @@map("businesses")
}

// Nuevo modelo para sucursales
model Branch {
  id          String   @id @default(cuid())
  businessId  String
  name        String   // "Sucursal Centro", "Local Belgrano"
  slug        String   // URL-friendly identifier
  address     String?
  phone       String?
  description String?
  banner      String?  // URL de la imagen de banner/foto de la sucursal
  bannerAlt   String?  // Texto alternativo para la imagen (accesibilidad)
  isActive    Boolean  @default(true)
  isMain      Boolean  @default(false) // Sucursal principal
  latitude    Float?   // Para geolocalización
  longitude   Float?
  timezone    String?  @default("America/Argentina/Buenos_Aires")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relaciones
  business     Business      @relation(fields: [businessId], references: [id], onDelete: Cascade)
  users        User[]
  services     BranchService[]
  appointments Appointment[]
  holidays     BranchHoliday[]
  breakTimes   BranchBreakTime[]

  @@unique([businessId, slug])
  @@map("branches")
}

model User {
  id         String   @id @default(cuid())
  businessId String
  branchId   String? // Sucursal específica (null = puede trabajar en todas)
  name       String
  email      String   @unique
  password   String
  role       UserRole @default(EMPLOYEE)
  isActive   Boolean  @default(true)
  avatar     String?
  phone      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relaciones
  business     Business       @relation(fields: [businessId], references: [id], onDelete: Cascade)
  branch       Branch?        @relation(fields: [branchId], references: [id], onDelete: SetNull)
  appointments Appointment[]
  workingHours WorkingHours[]

  @@map("users")
}

model Service {
  id          String   @id @default(cuid())
  businessId  String
  name        String
  description String?
  duration    Int // duración en minutos
  price       Float
  isActive    Boolean  @default(true)
  color       String?
  isGlobal    Boolean  @default(true) // Si está disponible en todas las sucursales
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relaciones
  business       Business        @relation(fields: [businessId], references: [id], onDelete: Cascade)
  appointments   Appointment[]
  branchServices BranchService[] // Servicios específicos por sucursal

  @@map("services")
}

// Tabla intermedia para servicios específicos por sucursal
model BranchService {
  id        String  @id @default(cuid())
  branchId  String
  serviceId String
  price     Float?  // Precio específico para esta sucursal (override)
  isActive  Boolean @default(true)
  createdAt DateTime @default(now())

  // Relaciones
  branch  Branch  @relation(fields: [branchId], references: [id], onDelete: Cascade)
  service Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@unique([branchId, serviceId])
  @@map("branch_services")
}

model Client {
  id         String   @id @default(cuid())
  businessId String
  name       String
  email      String?
  phone      String?
  notes      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relaciones
  business     Business      @relation(fields: [businessId], references: [id], onDelete: Cascade)
  appointments Appointment[]
  reviews      Review[]

  @@map("clients")
}

model Appointment {
  id           String            @id @default(cuid())
  businessId   String
  branchId     String            // Sucursal donde se realiza la cita
  clientId     String
  serviceId    String
  userId       String? // profesional asignado (opcional)
  startTime    DateTime
  endTime      DateTime
  status       AppointmentStatus @default(CONFIRMED)
  notes        String?
  reminderSent Boolean           @default(false)
  reviewRequestSent Boolean      @default(false)
  
  // Campos de pago
  payment_status String @default("pending") // pending, paid, failed, refunded
  payment_id String?
  paymentMethod String @default("LOCAL") // LOCAL (pago en el local), ADELANTADO (pago anticipado)
  
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt

  // Relaciones
  business Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  branch   Branch   @relation(fields: [branchId], references: [id], onDelete: Cascade)
  client   Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  service  Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  user     User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  review   Review?
  payment  AppointmentPayment? @relation(fields: [payment_id], references: [id])

  @@map("appointments")
}

model WorkingHours {
  id        String  @id @default(cuid())
  userId    String
  dayOfWeek Int // 0=Domingo, 1=Lunes, ..., 6=Sábado
  startTime String // HH:MM formato
  endTime   String // HH:MM formato
  isActive  Boolean @default(true)

  // Relaciones - Solo con User, no con Business
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, dayOfWeek])
  @@map("working_hours")
}

// Horarios de descanso por sucursal (ej: hora de almuerzo)
model BranchBreakTime {
  id        String  @id @default(cuid())
  branchId  String
  dayOfWeek Int // 0=Domingo, 1=Lunes, ..., 6=Sábado
  startTime String // HH:MM formato
  endTime   String // HH:MM formato
  name      String? // Ej: "Almuerzo", "Pausa de la tarde"
  isActive  Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  branch Branch @relation(fields: [branchId], references: [id], onDelete: Cascade)

  @@unique([branchId, dayOfWeek, startTime]) // Permitir múltiples descansos por día
  @@map("branch_break_times")
}

model Holiday {
  id          String   @id @default(cuid())
  businessId  String
  branchId    String?  // null = feriado global, específico = feriado por sucursal
  name        String
  date        DateTime
  isRecurring Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relaciones
  business Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@map("holidays")
}

// Modelo específico para feriados por sucursal (alternativa)
model BranchHoliday {
  id          String   @id @default(cuid())
  branchId    String
  name        String
  date        DateTime
  isRecurring Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relaciones
  branch Branch @relation(fields: [branchId], references: [id], onDelete: Cascade)

  @@map("branch_holidays")
}

model Review {
  id            String   @id @default(cuid())
  businessId    String
  clientId      String
  appointmentId String   @unique
  rating        Int      // 1-5 estrellas
  comment       String?
  isPublic      Boolean  @default(true)
  isApproved    Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relaciones
  business    Business    @relation(fields: [businessId], references: [id], onDelete: Cascade)
  client      Client      @relation(fields: [clientId], references: [id], onDelete: Cascade)
  appointment Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)

  @@map("reviews")
}

// Sistema de Scoring de Clientes Global
model ClientScore {
  id            String   @id @default(cuid())
  email         String?  // Identificador primario
  phone         String?  // Identificador secundario
  name          String   // Último nombre usado
  totalPoints   Float    @default(0) // Puntos acumulados con ponderación
  totalWeight   Float    @default(0) // Peso total para calcular promedio
  starRating    Int?     // 1-5 estrellas calculadas
  totalBookings Int      @default(0) // Total de reservas
  attendedCount Int      @default(0) // Citas a las que asistió
  noShowCount   Int      @default(0) // No-shows
  lastActivity  DateTime @default(now()) // Última actividad
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relaciones
  history ClientHistory[]

  @@unique([email])
  @@unique([phone])
  @@map("client_scores")
}

// Historial detallado de eventos de cliente
model ClientHistory {
  id             String              @id @default(cuid())
  clientScoreId  String
  businessId     String             // Para referencia (sin relación directa)
  appointmentId  String             // Para referencia
  eventType      ClientEventType
  points         Float              // Puntos otorgados/descontados
  weight         Float              // Peso de este evento
  notes          String?            // Notas adicionales
  eventDate      DateTime           // Fecha del evento
  createdAt      DateTime           @default(now())

  // Relaciones
  clientScore ClientScore @relation(fields: [clientScoreId], references: [id], onDelete: Cascade)

  @@map("client_history")
}

// Enums
enum PlanType {
  FREE
  BASIC
  PREMIUM
  ENTERPRISE
}

enum BusinessType {
  GENERAL      // Negocio general
  BARBERSHOP   // Barbería
  HAIR_SALON   // Peluquería
  BEAUTY_CENTER // Centro estético
  MEDICAL_CENTER // Centro médico
  MASSAGE_SPA   // Centro de masajes/SPA
}

enum UserRole {
  ADMIN
  EMPLOYEE
}

enum AppointmentStatus {
  CONFIRMED
  CANCELLED
  NO_SHOW
  COMPLETED
  PENDING_PAYMENT
}

enum ClientEventType {
  ATTENDED       // Asistió a la cita
  NO_SHOW        // No se presentó
  CANCELLED_LATE // Canceló tarde (< 24h)
  CANCELLED_GOOD // Canceló con tiempo (> 24h)
}

// Sistema de Suscripciones
model Subscription {
  id                String              @id @default(cuid())
  businessId        String              @unique
  planType          PlanType
  status            SubscriptionStatus  @default(ACTIVE)
  billingCycle      BillingCycle        @default(MONTHLY)
  priceAmount       Float               // Precio pagado (para histórico)
  currency          String              @default("ARS")
  
  // Fechas importantes
  startDate         DateTime
  endDate           DateTime?           // null = indefinida
  nextBillingDate   DateTime?
  cancelledAt       DateTime?
  
  // MercadoPago Integration
  mercadoPagoSubscriptionId String?    @unique
  mercadoPagoCustomerId     String?
  
  // Metadatos
  metadata          Json?               // Info adicional flexible
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

  // Relaciones
  business          Business            @relation(fields: [businessId], references: [id], onDelete: Cascade)
  payments          Payment[]

  @@map("subscriptions")
}

// Historial de Pagos
model Payment {
  id                    String        @id @default(cuid())
  subscriptionId        String
  amount                Float
  currency              String        @default("ARS")
  status                PaymentStatus @default(PENDING)
  billingCycle          BillingCycle
  
  // MercadoPago
  mercadoPagoPaymentId  String?       @unique
  mercadoPagoOrderId    String?
  preferenceId          String?       @unique
  
  // Fechas
  paidAt                DateTime?
  dueDate               DateTime?
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  
  // Metadatos del pago
  paymentMethod         String?       // "credit_card", "debit_card", etc.
  installments          Int?          // Cuotas si aplica
  failureReason         String?       // Razón de falla si no se completó
  
  // Relaciones
  subscription          Subscription  @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@map("payments")
}

// Histórico de cambios de plan
model PlanChange {
  id               String    @id @default(cuid())
  businessId       String
  fromPlan         PlanType
  toPlan           PlanType
  changeReason     String?   // "upgrade", "downgrade", "payment_failed", etc.
  effectiveDate    DateTime
  createdAt        DateTime  @default(now())
  
  // Relaciones
  business         Business  @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@map("plan_changes")
}

// Enums para suscripciones
enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  SUSPENDED
  EXPIRED
  PAYMENT_FAILED
}

enum BillingCycle {
  MONTHLY
  YEARLY
}

enum PaymentStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
  REFUNDED
}

// Pagos de citas individuales (diferente de suscripciones)
model AppointmentPayment {
  id            String   @id @default(cuid())
  business_id   String
  appointment_id String  @unique
  
  // Datos de Mercado Pago
  mp_payment_id String?   @unique // ID del pago en MP
  mp_preference_id String? // ID de la preferencia
  mp_collection_id String? // ID de la colección
  
  // Datos del pago
  amount        Float
  currency      String   @default("ARS")
  description   String?
  
  // Estados
  status        String   @default("pending") // pending, approved, rejected, cancelled, refunded
  payment_method String? // credit_card, debit_card, cash, etc
  payment_type  String?  // account_money, credit_card, etc
  
  // Metadatos
  external_reference String? // Referencia externa (appointment_id)
  payer_email   String?
  payer_name    String?
  payer_phone   String?
  
  // Timestamps
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  paid_at       DateTime?
  
  // Datos adicionales de MP
  mp_data       Json?    // Para guardar toda la respuesta de MP
  
  // Relaciones
  business      Business     @relation(fields: [business_id], references: [id], onDelete: Cascade)
  appointments  Appointment[] // Relación inversa
  
  @@map("appointment_payments")
}

// Configuración de pagos por negocio
model PaymentSettings {
  id                    String   @id @default(cuid())
  business_id           String   @unique
  
  // Configuraciones
  require_payment       Boolean  @default(false) // Si requiere pago obligatorio
  payment_deadline_hours Int     @default(24) // Horas para pagar antes de la cita
  auto_cancel_unpaid    Boolean  @default(false) // Cancelar automáticamente si no paga
  
  // Configuración de MP
  mp_webhook_url        String?
  mp_success_url        String?
  mp_failure_url        String?
  mp_pending_url        String?
  
  // Metadatos
  created_at            DateTime @default(now())
  updated_at            DateTime @updatedAt
  
  // Relaciones
  business              Business @relation(fields: [business_id], references: [id], onDelete: Cascade)
  
  @@map("payment_settings")
}
