const clientScoringService = require('../src/services/clientScoringService');

async function testClientScoring() {
  console.log('üß™ Probando sistema de scoring de clientes...\n');
  
  try {
    // 1. Crear cliente de prueba con eventos
    console.log('1Ô∏è‚É£ Creando cliente de prueba...');
    
    const testEmail = 'cliente.prueba@test.com';
    const testPhone = '+5491123456789';
    const testName = 'Cliente de Prueba';
    const businessId = 'test-business-id';
    
    // Simular varios eventos
    const events = [
      { appointmentId: 'apt-1', eventType: 'ATTENDED', notes: 'Lleg√≥ puntual' },
      { appointmentId: 'apt-2', eventType: 'ATTENDED', notes: 'Muy amable' },
      { appointmentId: 'apt-3', eventType: 'NO_SHOW', notes: 'No se present√≥' },
      { appointmentId: 'apt-4', eventType: 'ATTENDED', notes: 'Lleg√≥ 5 min tarde' },
      { appointmentId: 'apt-5', eventType: 'CANCELLED_GOOD', notes: 'Cancel√≥ con 2 d√≠as de anticipaci√≥n' },
      { appointmentId: 'apt-6', eventType: 'ATTENDED', notes: 'Excelente cliente' }
    ];
    
    console.log('üìù Registrando eventos...');
    for (const event of events) {
      const result = await clientScoringService.recordClientEvent(
        testEmail,
        testPhone,
        testName,
        businessId,
        event.appointmentId,
        event.eventType,
        event.notes
      );
      
      console.log(`   ‚úÖ ${event.eventType}: ${result.starRating} estrellas`);
    }
    
    // 2. Obtener scoring del cliente
    console.log('\n2Ô∏è‚É£ Obteniendo scoring del cliente...');
    const clientScore = await clientScoringService.getClientScore(testEmail, testPhone);
    
    if (clientScore) {
      console.log('üìä Resultado del scoring:');
      console.log(`   ‚≠ê Estrellas: ${clientScore.starRating}/5`);
      console.log(`   üìà Total reservas: ${clientScore.totalBookings}`);
      console.log(`   ‚úÖ Asistencias: ${clientScore.attendedCount}`);
      console.log(`   ‚ùå No-shows: ${clientScore.noShowCount}`);
      console.log(`   üìÖ √öltima actividad: ${clientScore.lastActivity}`);
      
      console.log('\nüìã Historial reciente:');
      clientScore.history.forEach((event, index) => {
        console.log(`   ${index + 1}. ${event.eventType} - ${event.points} puntos (${event.eventDate.toLocaleDateString()})`);
      });
    }
    
    // 3. Probar b√∫squeda por tel√©fono
    console.log('\n3Ô∏è‚É£ Probando b√∫squeda por tel√©fono...');
    const clientByPhone = await clientScoringService.getClientScore(null, testPhone);
    console.log(`   üì± Cliente encontrado por tel√©fono: ${clientByPhone ? 'S√ç' : 'NO'}`);
    
    // 4. Obtener estad√≠sticas generales
    console.log('\n4Ô∏è‚É£ Estad√≠sticas generales del sistema...');
    const stats = await clientScoringService.getClientScoringStats();
    console.log('üìà Estad√≠sticas:');
    console.log(`   üë• Total clientes: ${stats.totalClients}`);
    console.log(`   ‚≠ê Rating promedio: ${stats.averageRating?.toFixed(2) || 'N/A'}`);
    console.log('   üìä Distribuci√≥n:');
    Object.entries(stats.distribution).forEach(([rating, count]) => {
      const stars = rating === 'null' ? 'Sin rating' : `${rating} estrellas`;
      console.log(`      ${stars}: ${count} clientes`);
    });
    
    console.log('\n‚úÖ ¬°Prueba del sistema de scoring completada exitosamente!');
    
  } catch (error) {
    console.error('‚ùå Error en la prueba:', error);
  }
}

// Ejecutar si se llama directamente
if (require.main === module) {
  testClientScoring()
    .then(() => process.exit(0))
    .catch((error) => {
      console.error('‚ùå Error fatal:', error);
      process.exit(1);
    });
}

module.exports = { testClientScoring }; 