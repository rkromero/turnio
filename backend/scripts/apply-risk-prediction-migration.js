/**
 * Script de Migraci√≥n: Sistema de Predicci√≥n de Riesgo
 * 
 * Aplica todos los cambios necesarios para el sistema de predicci√≥n
 * de cancelaciones con IA/ML
 */

const { PrismaClient } = require('@prisma/client');
const fs = require('fs');
const path = require('path');

const prisma = new PrismaClient();

async function applyRiskPredictionMigration() {
  console.log('üîß Iniciando migraci√≥n del Sistema de Predicci√≥n de Riesgo...\n');

  try {
    // Leer el archivo SQL
    const sqlPath = path.join(__dirname, 'add-risk-prediction-system.sql');
    const sqlContent = fs.readFileSync(sqlPath, 'utf8');

    // Dividir en statements individuales
    const statements = sqlContent
      .split(';')
      .map(s => s.trim())
      .filter(s => s.length > 0 && !s.startsWith('--') && !s.startsWith('COMMENT'));

    console.log(`üìã Ejecutando ${statements.length} statements SQL...\n`);

    let executed = 0;
    let errors = 0;

    for (const statement of statements) {
      try {
        // Ejecutar statement
        await prisma.$executeRawUnsafe(statement);
        executed++;
        
        if (executed % 5 === 0) {
          console.log(`   ‚úÖ ${executed}/${statements.length} statements ejecutados...`);
        }
      } catch (error) {
        // Ignorar errores de "ya existe" que son esperados
        if (error.message.includes('already exists') || 
            error.message.includes('duplicate') ||
            error.message.includes('IF NOT EXISTS')) {
          executed++;
          continue;
        }
        
        errors++;
        console.error(`   ‚ùå Error en statement:`, error.message);
      }
    }

    console.log('\n' + '='.repeat(60));
    console.log('üìä RESUMEN DE MIGRACI√ìN:');
    console.log('='.repeat(60));
    console.log(`‚úÖ Statements ejecutados exitosamente: ${executed}`);
    console.log(`‚ùå Errores: ${errors}`);
    console.log(`üìã Total procesados: ${statements.length}`);
    console.log('='.repeat(60));

    if (errors === 0) {
      console.log('\nüéâ ¬°Migraci√≥n completada exitosamente!');
      console.log('üìù Sistema de Predicci√≥n de Riesgo instalado');
      console.log('\nüìä Nuevas tablas creadas:');
      console.log('   - appointment_risk_predictions');
      console.log('   - time_slot_stats');
      console.log('\nüîß Tablas actualizadas:');
      console.log('   - appointments (+ 3 campos)');
      console.log('   - services (+ 3 campos)');
      console.log('   - client_scores (+ 4 campos)');
      console.log('\n‚ö° Pr√≥ximo paso: Ejecutar c√°lculo inicial de estad√≠sticas');
    } else {
      console.log(`\n‚ö†Ô∏è Migraci√≥n completada con ${errors} errores`);
    }

  } catch (error) {
    console.error('\n‚ùå Error fatal durante la migraci√≥n:', error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

// Ejecutar migraci√≥n
applyRiskPredictionMigration()
  .then(() => {
    console.log('\n‚úÖ Script finalizado');
    process.exit(0);
  })
  .catch((error) => {
    console.error('\n‚ùå Script fall√≥:', error);
    process.exit(1);
  });

