const SubscriptionValidationService = require('./src/services/subscriptionValidationService');
const RenewalReminderService = require('./src/services/renewalReminderService');

class SchedulerService {
  
  constructor() {
    this.intervals = new Map();
  }

  // Iniciar el scheduler de validaciones
  startValidationScheduler() {
    console.log('üöÄ Iniciando scheduler de validaciones de suscripci√≥n...');
    
    // Ejecutar validaciones cada 6 horas
    const validationInterval = setInterval(async () => {
      try {
        console.log('\n‚è∞ Ejecutando validaciones programadas...');
        await SubscriptionValidationService.runAllValidations();
      } catch (error) {
        console.error('‚ùå Error en validaci√≥n programada:', error);
      }
    }, 6 * 60 * 60 * 1000); // 6 horas

    this.intervals.set('validation', validationInterval);
    
    // Ejecutar validaciones inmediatamente al iniciar
    setTimeout(async () => {
      try {
        console.log('üöÄ Ejecutando validaci√≥n inicial...');
        await SubscriptionValidationService.runAllValidations();
      } catch (error) {
        console.error('‚ùå Error en validaci√≥n inicial:', error);
      }
    }, 5000); // 5 segundos despu√©s de iniciar

    console.log('‚úÖ Scheduler de validaciones iniciado');
  }

  // Iniciar el scheduler de recordatorios de renovaci√≥n
  startRenewalScheduler() {
    console.log('üöÄ Iniciando scheduler de recordatorios de renovaci√≥n...');
    
    // Ejecutar recordatorios cada 12 horas
    const renewalInterval = setInterval(async () => {
      try {
        console.log('\n‚è∞ Ejecutando tareas de renovaci√≥n programadas...');
        await RenewalReminderService.runAllRenewalTasks();
      } catch (error) {
        console.error('‚ùå Error en tareas de renovaci√≥n:', error);
      }
    }, 12 * 60 * 60 * 1000); // 12 horas

    this.intervals.set('renewal', renewalInterval);
    
    // Ejecutar tareas de renovaci√≥n inmediatamente al iniciar
    setTimeout(async () => {
      try {
        console.log('üöÄ Ejecutando tareas de renovaci√≥n inicial...');
        await RenewalReminderService.runAllRenewalTasks();
      } catch (error) {
        console.error('‚ùå Error en tareas de renovaci√≥n inicial:', error);
      }
    }, 10000); // 10 segundos despu√©s de iniciar

    console.log('‚úÖ Scheduler de recordatorios de renovaci√≥n iniciado');
  }

  // Detener el scheduler de validaciones
  stopValidationScheduler() {
    const interval = this.intervals.get('validation');
    if (interval) {
      clearInterval(interval);
      this.intervals.delete('validation');
      console.log('‚èπÔ∏è  Scheduler de validaciones detenido');
    }
  }

  // Detener el scheduler de renovaciones
  stopRenewalScheduler() {
    const interval = this.intervals.get('renewal');
    if (interval) {
      clearInterval(interval);
      this.intervals.delete('renewal');
      console.log('‚èπÔ∏è  Scheduler de renovaciones detenido');
    }
  }

  // Detener todos los schedulers
  stopAllSchedulers() {
    this.stopValidationScheduler();
    this.stopRenewalScheduler();
    console.log('‚èπÔ∏è  Todos los schedulers detenidos');
  }

  // Ejecutar validaciones una vez (para testing)
  async runValidationsOnce() {
    try {
      console.log('üîç Ejecutando validaciones una vez...');
      const results = await SubscriptionValidationService.runAllValidations();
      console.log('‚úÖ Validaciones completadas:', results);
      return results;
    } catch (error) {
      console.error('‚ùå Error ejecutando validaciones:', error);
      throw error;
    }
  }

  // Ejecutar tareas de renovaci√≥n una vez (para testing)
  async runRenewalTasksOnce() {
    try {
      console.log('üîç Ejecutando tareas de renovaci√≥n una vez...');
      const results = await RenewalReminderService.runAllRenewalTasks();
      console.log('‚úÖ Tareas de renovaci√≥n completadas:', results);
      return results;
    } catch (error) {
      console.error('‚ùå Error ejecutando tareas de renovaci√≥n:', error);
      throw error;
    }
  }

  // Obtener estado del scheduler
  getSchedulerStatus() {
    return {
      validationScheduler: this.intervals.has('validation'),
      renewalScheduler: this.intervals.has('renewal'),
      activeIntervals: Array.from(this.intervals.keys())
    };
  }
}

// Instancia singleton
const schedulerService = new SchedulerService();

module.exports = schedulerService; 