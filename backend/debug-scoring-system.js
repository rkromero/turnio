// Script completo para diagnosticar el sistema de scoring
const axios = require('axios');

async function debugScoringSystem() {
  console.log('üîç DIAGN√ìSTICO COMPLETO DEL SISTEMA DE SCORING\n');
  
  try {
    // 1. Verificar si las tablas existen y tienen datos
    console.log('1Ô∏è‚É£ Verificando estructura de base de datos...');
    
    try {
      const dbCheck = await axios.get('https://turnio-backend-production.up.railway.app/debug/check-scoring-tables');
      console.log('‚úÖ Respuesta de verificaci√≥n de tablas:', dbCheck.data);
    } catch (error) {
      console.log('‚ùå Error verificando tablas:', error.response?.data || error.message);
    }
    
    // 2. Probar endpoint de scoring con diferentes emails
    console.log('\n2Ô∏è‚É£ Probando endpoint de scoring...');
    
    const testEmails = [
      'pepe@test.com',
      'ricardo@gmail.com',
      'juan.perez@email.com',
      'test@score.com'
    ];
    
    for (const email of testEmails) {
      try {
        console.log(`\nüìß Probando email: ${email}`);
        const response = await axios.get(`https://turnio-backend-production.up.railway.app/api/client-scoring/score?email=${encodeURIComponent(email)}`);
        console.log('   Respuesta:', JSON.stringify(response.data, null, 2));
      } catch (error) {
        console.log('   ‚ùå Error:', error.response?.status, error.response?.data || error.message);
      }
    }
    
    // 3. Verificar clientes existentes en la tabla principal
    console.log('\n3Ô∏è‚É£ Verificando clientes en tabla principal...');
    
    try {
      const clientsCheck = await axios.get('https://turnio-backend-production.up.railway.app/debug/list-clients');
      console.log('‚úÖ Clientes en base de datos:', clientsCheck.data);
    } catch (error) {
      console.log('‚ùå Error obteniendo clientes:', error.response?.data || error.message);
    }
    
    // 4. Verificar citas existentes
    console.log('\n4Ô∏è‚É£ Verificando citas existentes...');
    
    try {
      const appointmentsCheck = await axios.get('https://turnio-backend-production.up.railway.app/debug/list-appointments');
      console.log('‚úÖ Citas recientes:', appointmentsCheck.data);
    } catch (error) {
      console.log('‚ùå Error obteniendo citas:', error.response?.data || error.message);
    }
    
    // 5. Probar creaci√≥n manual de scoring
    console.log('\n5Ô∏è‚É£ Probando creaci√≥n manual de scoring...');
    
    try {
      const createScoring = await axios.post('https://turnio-backend-production.up.railway.app/debug/create-test-scoring', {
        email: 'test-scoring@debug.com',
        name: 'Test Scoring Usuario'
      });
      console.log('‚úÖ Scoring de prueba creado:', createScoring.data);
    } catch (error) {
      console.log('‚ùå Error creando scoring de prueba:', error.response?.data || error.message);
    }
    
    // 6. Verificar logs del servidor
    console.log('\n6Ô∏è‚É£ Verificando logs del servidor...');
    
    try {
      const logs = await axios.get('https://turnio-backend-production.up.railway.app/debug/recent-logs');
      console.log('üìã Logs recientes:', logs.data);
    } catch (error) {
      console.log('‚ùå Error obteniendo logs:', error.response?.data || error.message);
    }
    
    console.log('\nüéØ RESUMEN DEL DIAGN√ìSTICO COMPLETADO');
    console.log('Ver resultados arriba para identificar los problemas espec√≠ficos.');
    
  } catch (error) {
    console.error('‚ùå Error general en diagn√≥stico:', error.message);
  }
}

debugScoringSystem(); 