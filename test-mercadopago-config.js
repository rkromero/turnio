const fetch = require('node-fetch');

async function testMercadoPagoConfig() {
  try {
    console.log('üß™ === VERIFICACI√ìN DE CONFIGURACI√ìN MERCADOPAGO ===\n');
    
    // PASO 1: Verificar variables de entorno
    console.log('üîß PASO 1: Verificando configuraci√≥n...');
    
    const configResponse = await fetch('https://turnio-backend-production.up.railway.app/api/subscriptions/test-db');
    if (configResponse.ok) {
      console.log('‚úÖ Backend funcionando correctamente');
    } else {
      console.log('‚ùå Backend no responde');
      return;
    }
    
    // PASO 2: Crear negocio de prueba
    console.log('\nüìù PASO 2: Creando negocio de prueba...');
    const registerData = {
      businessName: 'Test MercadoPago Config',
      email: 'test.mercadopago@example.com',
      password: 'Test123!',
      phone: '1234567890',
      address: 'Test Address 999',
      businessType: 'GENERAL'
    };
    
    const registerResponse = await fetch('https://turnio-backend-production.up.railway.app/api/auth/register', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(registerData)
    });
    
    if (!registerResponse.ok) {
      throw new Error(`Registro fall√≥: ${registerResponse.status}`);
    }
    
    const registerResult = await registerResponse.json();
    const businessId = registerResult.data.business.id;
    console.log('‚úÖ Negocio creado:', registerResult.data.business.name);
    console.log('üéØ Business ID:', businessId);
    
    // PASO 3: Crear suscripci√≥n
    console.log('\nüí≥ PASO 3: Creando suscripci√≥n BASIC...');
    const subscriptionData = {
      businessId: businessId,
      planType: 'BASIC',
      billingCycle: 'MONTHLY'
    };
    
    const subscriptionResponse = await fetch('https://turnio-backend-production.up.railway.app/api/subscriptions/create-temp', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(subscriptionData)
    });
    
    if (!subscriptionResponse.ok) {
      throw new Error(`Crear suscripci√≥n fall√≥: ${subscriptionResponse.status}`);
    }
    
    const subscriptionResult = await subscriptionResponse.json();
    const subscriptionId = subscriptionResult.data.subscription.id;
    console.log('‚úÖ Suscripci√≥n creada:', subscriptionResult.data.subscription.planType);
    console.log('üéØ Subscription ID:', subscriptionId);
    
    // PASO 4: Probar pago √∫nico (m√©todo actual)
    console.log('\nüí≥ PASO 4: Probando pago √∫nico...');
    const paymentData = {
      subscriptionId: subscriptionId
    };
    
    const paymentResponse = await fetch('https://turnio-backend-production.up.railway.app/api/mercadopago/create-payment', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(paymentData)
    });
    
    if (paymentResponse.ok) {
      const paymentResult = await paymentResponse.json();
      console.log('‚úÖ Pago √∫nico creado exitosamente');
      console.log('üéØ Preference ID:', paymentResult.data.preferenceId);
      console.log('üéØ Init Point:', paymentResult.data.initPoint);
      console.log('üéØ Public Key:', paymentResult.data.publicKey);
    } else {
      const errorText = await paymentResponse.text();
      console.log('‚ö†Ô∏è  Pago √∫nico fall√≥:', errorText);
    }
    
    // PASO 5: Probar suscripci√≥n autom√°tica
    console.log('\nüîÑ PASO 5: Probando suscripci√≥n autom√°tica...');
    
    const autoSubscriptionResponse = await fetch('https://turnio-backend-production.up.railway.app/api/mercadopago/create-automatic-subscription', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(paymentData)
    });
    
    if (autoSubscriptionResponse.ok) {
      const autoSubscriptionResult = await autoSubscriptionResponse.json();
      console.log('‚úÖ Suscripci√≥n autom√°tica creada exitosamente');
      console.log('üéØ MercadoPago Subscription ID:', autoSubscriptionResult.data.subscriptionId);
      console.log('üéØ Status:', autoSubscriptionResult.data.subscription.status);
    } else {
      const errorText = await autoSubscriptionResponse.text();
      console.log('‚ö†Ô∏è  Suscripci√≥n autom√°tica fall√≥:', errorText);
    }
    
    // PASO 6: Verificar configuraci√≥n
    console.log('\nüìä PASO 6: Verificando configuraci√≥n...');
    console.log('‚úÖ Backend funcionando');
    console.log('‚úÖ Base de datos conectada');
    console.log('‚úÖ Endpoints de suscripci√≥n funcionando');
    console.log('‚úÖ Endpoints de MercadoPago configurados');
    
    console.log('\nüîß CONFIGURACI√ìN REQUERIDA EN MERCADOPAGO:');
    console.log('1. Crear aplicaci√≥n tipo "Web" en MercadoPago Developers');
    console.log('2. Configurar webhooks:');
    console.log('   - /api/mercadopago/webhook (eventos: payment)');
    console.log('   - /api/mercadopago/subscription-webhook (eventos: subscription_authorized_payment)');
    console.log('3. Configurar URLs de retorno en la aplicaci√≥n');
    console.log('4. Verificar variables de entorno en Railway');
    
    console.log('\nüéâ === VERIFICACI√ìN COMPLETADA ===');
    console.log('‚úÖ Sistema funcionando correctamente');
    console.log('‚úÖ Listo para configurar MercadoPago');
    console.log('‚úÖ Suscripciones autom√°ticas preparadas');
    
  } catch (error) {
    console.error('‚ùå Error en la verificaci√≥n:', error.message);
  }
}

testMercadoPagoConfig(); 