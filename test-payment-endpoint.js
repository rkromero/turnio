const fetch = require('node-fetch');

console.log('üîç === DIAGN√ìSTICO DEL ENDPOINT DE PAGO ===\n');

const API_BASE_URL = 'https://turnio-backend-production.up.railway.app/api';

// Funci√≥n para extraer token de cookie
function extractTokenFromCookie(setCookieHeader) {
  if (!setCookieHeader) return null;
  const tokenMatch = setCookieHeader.match(/token=([^;]+)/);
  return tokenMatch ? tokenMatch[1] : null;
}

async function testPaymentEndpoint() {
  try {
    // PASO 1: Crear negocio de prueba
    console.log('üè¢ PASO 1: Creando negocio de prueba...');
    const registerData = {
      businessName: 'Negocio Test Pago',
      email: `test.pago.${Date.now()}@example.com`,
      password: 'Test123!',
      phone: '1234567890',
      address: 'Direcci√≥n de Prueba Pago 123',
      businessType: 'GENERAL'
    };

    const registerResponse = await fetch(`${API_BASE_URL}/auth/register`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(registerData)
    });

    if (!registerResponse.ok) {
      const errorData = await registerResponse.json();
      throw new Error(`Registro fall√≥: ${errorData.message || registerResponse.status}`);
    }

    const registerResult = await registerResponse.json();
    const businessId = registerResult.data.business.id;
    const setCookieHeader = registerResponse.headers.get('set-cookie');
    const token = extractTokenFromCookie(setCookieHeader);

    console.log('‚úÖ Negocio creado exitosamente');
    console.log('üéØ Business ID:', businessId);
    console.log('üîê Token obtenido:', token ? 'S√ç' : 'NO');

    if (!token) {
      throw new Error('No se pudo obtener token de autenticaci√≥n');
    }

    // PASO 2: Crear suscripci√≥n de prueba
    console.log('\nüí≥ PASO 2: Creando suscripci√≥n de prueba...');
    const subscriptionData = {
      businessId: businessId,
      planType: 'PREMIUM',
      billingCycle: 'MONTHLY'
    };

    const subscriptionResponse = await fetch(`${API_BASE_URL}/subscriptions/create`, {
      method: 'POST',
      headers: { 
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`,
        'Cookie': `token=${token}`
      },
      body: JSON.stringify(subscriptionData)
    });

    if (!subscriptionResponse.ok) {
      const errorData = await subscriptionResponse.json();
      throw new Error(`Creaci√≥n de suscripci√≥n fall√≥: ${errorData.message || subscriptionResponse.status}`);
    }

    const subscriptionResult = await subscriptionResponse.json();
    const subscriptionId = subscriptionResult.data.subscription.id;

    console.log('‚úÖ Suscripci√≥n creada exitosamente');
    console.log('üéØ Subscription ID:', subscriptionId);
    console.log('üìä Estado inicial:', subscriptionResult.data.subscription.status);

    // PASO 3: Verificar estado de la suscripci√≥n
    console.log('\nüìä PASO 3: Verificando estado de la suscripci√≥n...');
    
    const currentSubscriptionResponse = await fetch(`${API_BASE_URL}/subscriptions/current`, {
      headers: { 
        'Authorization': `Bearer ${token}`,
        'Cookie': `token=${token}`
      }
    });

    if (currentSubscriptionResponse.ok) {
      const currentSubscriptionData = await currentSubscriptionResponse.json();
      console.log('‚úÖ Estado de suscripci√≥n obtenido');
      console.log('üìä Estado:', currentSubscriptionData.data?.status);
      console.log('üí≥ Plan:', currentSubscriptionData.data?.planType);
    } else {
      console.log('‚ö†Ô∏è  Error al obtener suscripci√≥n actual:', currentSubscriptionResponse.status);
      const errorText = await currentSubscriptionResponse.text();
      console.log('üìã Error detallado:', errorText);
    }

    // PASO 4: Probar endpoint de pago con diferentes headers
    console.log('\nüí≥ PASO 4: Probando endpoint de pago...');
    
    const paymentData = {
      subscriptionId: subscriptionId,
      amount: 9900,
      billingCycle: 'MONTHLY'
    };

    // Probar con Authorization header
    console.log('üîç Probando con Authorization header...');
    const paymentResponse1 = await fetch(`${API_BASE_URL}/mercadopago/create-payment`, {
      method: 'POST',
      headers: { 
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`
      },
      body: JSON.stringify(paymentData)
    });

    console.log('üìä Status con Authorization:', paymentResponse1.status);
    if (!paymentResponse1.ok) {
      const errorData1 = await paymentResponse1.json();
      console.log('‚ùå Error con Authorization:', errorData1);
    } else {
      const result1 = await paymentResponse1.json();
      console.log('‚úÖ √âxito con Authorization:', result1.success);
    }

    // Probar con Cookie header
    console.log('\nüîç Probando con Cookie header...');
    const paymentResponse2 = await fetch(`${API_BASE_URL}/mercadopago/create-payment`, {
      method: 'POST',
      headers: { 
        'Content-Type': 'application/json',
        'Cookie': `token=${token}`
      },
      body: JSON.stringify(paymentData)
    });

    console.log('üìä Status con Cookie:', paymentResponse2.status);
    if (!paymentResponse2.ok) {
      const errorData2 = await paymentResponse2.json();
      console.log('‚ùå Error con Cookie:', errorData2);
    } else {
      const result2 = await paymentResponse2.json();
      console.log('‚úÖ √âxito con Cookie:', result2.success);
    }

    // Probar con ambos headers
    console.log('\nüîç Probando con ambos headers...');
    const paymentResponse3 = await fetch(`${API_BASE_URL}/mercadopago/create-payment`, {
      method: 'POST',
      headers: { 
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`,
        'Cookie': `token=${token}`
      },
      body: JSON.stringify(paymentData)
    });

    console.log('üìä Status con ambos headers:', paymentResponse3.status);
    if (!paymentResponse3.ok) {
      const errorData3 = await paymentResponse3.json();
      console.log('‚ùå Error con ambos headers:', errorData3);
    } else {
      const result3 = await paymentResponse3.json();
      console.log('‚úÖ √âxito con ambos headers:', result3.success);
    }

    // PASO 5: Verificar logs del servidor
    console.log('\nüìã PASO 5: Resumen del diagn√≥stico...');
    console.log('üîç El problema parece estar en el middleware de autenticaci√≥n');
    console.log('üí° Posibles causas:');
    console.log('   1. El middleware est√° usando authenticateToken en lugar de authenticateTokenOnly');
    console.log('   2. La suscripci√≥n se est√° creando en estado PAYMENT_FAILED');
    console.log('   3. El middleware est√° bloqueando el acceso al endpoint de pago');
    console.log('   4. Hay un problema con la configuraci√≥n de rutas');

  } catch (error) {
    console.error('\n‚ùå Error durante el diagn√≥stico:', error.message);
  }
}

// Ejecutar diagn√≥stico
testPaymentEndpoint(); 