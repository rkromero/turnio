require('dotenv').config();

console.log('üöÄ === ACTIVADOR DE COBRO AUTOM√ÅTICO - TurnIO ===\n');

async function main() {
  const args = process.argv.slice(2);
  const comando = args[0];

  switch (comando) {
    case 'produccion':
      await activarProduccion();
      break;
    case 'pruebas':
      await ejecutarPruebas();
      break;
    case 'verificar':
      await verificarConfiguracion();
      break;
    case 'scheduler':
      await probarScheduler();
      break;
    default:
      mostrarAyuda();
  }
}

function mostrarAyuda() {
  console.log('üìã ACTIVADOR DE COBRO AUTOM√ÅTICO');
  console.log('');
  console.log('USO: node activar-cobro-automatico.js [comando]');
  console.log('');
  console.log('COMANDOS:');
  console.log('  produccion  - Configurar para producci√≥n (Railway)');
  console.log('  pruebas     - Ejecutar pruebas completas del sistema');
  console.log('  verificar   - Verificar configuraci√≥n actual');
  console.log('  scheduler   - Probar el scheduler manualmente');
  console.log('');
  console.log('EJEMPLOS:');
  console.log('  node activar-cobro-automatico.js verificar');
  console.log('  node activar-cobro-automatico.js pruebas');
  console.log('  node activar-cobro-automatico.js produccion');
}

async function verificarConfiguracion() {
  console.log('üîç VERIFICANDO CONFIGURACI√ìN...\n');

  // Variables de entorno requeridas
  const variablesRequeridas = [
    'MERCADOPAGO_ACCESS_TOKEN',
    'MERCADOPAGO_PUBLIC_KEY', 
    'BACKEND_URL',
    'FRONTEND_URL',
    'DATABASE_URL'
  ];

  console.log('1Ô∏è‚É£ Variables de entorno:');
  let todasConfiguradas = true;
  
  for (const variable of variablesRequeridas) {
    if (process.env[variable]) {
      const valor = process.env[variable];
      const valorMostrar = valor.length > 30 ? valor.substring(0, 30) + '...' : valor;
      console.log(`‚úÖ ${variable}: ${valorMostrar}`);
    } else {
      console.log(`‚ùå ${variable}: NO CONFIGURADA`);
      todasConfiguradas = false;
    }
  }

  console.log('\n2Ô∏è‚É£ URLs del sistema:');
  console.log(`üì§ Backend:  ${process.env.BACKEND_URL || 'NO CONFIGURADA'}`);
  console.log(`üåê Frontend: ${process.env.FRONTEND_URL || 'NO CONFIGURADA'}`);

  console.log('\n3Ô∏è‚É£ Webhooks de MercadoPago que debes configurar:');
  console.log(`üîó Pago √∫nico:     ${process.env.BACKEND_URL}/api/mercadopago/webhook`);
  console.log(`üîó Suscripciones:  ${process.env.BACKEND_URL}/api/mercadopago/subscription-webhook`);

  console.log('\n4Ô∏è‚É£ Estado del sistema:');
  if (todasConfiguradas) {
    console.log('‚úÖ Configuraci√≥n COMPLETA - Sistema listo para cobrar autom√°ticamente');
    console.log('\nüí° Pr√≥ximos pasos:');
    console.log('   1. node activar-cobro-automatico.js pruebas');
    console.log('   2. Configurar webhooks en MercadoPago');
    console.log('   3. node activar-cobro-automatico.js produccion');
  } else {
    console.log('‚ùå Configuraci√≥n INCOMPLETA - Configura las variables faltantes');
  }
}

async function ejecutarPruebas() {
  console.log('üß™ EJECUTANDO PRUEBAS DEL SISTEMA...\n');

  try {
    console.log('Ejecutando pruebas completas...');
    const { spawn } = require('child_process');
    
    const proceso = spawn('node', ['test-auto-subscription-complete.js', 'full'], {
      stdio: 'inherit'
    });

    proceso.on('close', (codigo) => {
      if (codigo === 0) {
        console.log('\nüéâ PRUEBAS COMPLETADAS EXITOSAMENTE');
      } else {
        console.log('\n‚ùå PRUEBAS FALLARON');
      }
    });

  } catch (error) {
    console.error('‚ùå Error ejecutando pruebas:', error.message);
  }
}

async function probarScheduler() {
  console.log('‚è∞ PROBANDO SCHEDULER MANUALMENTE...\n');

  try {
    // Probar importaci√≥n del scheduler
    console.log('1Ô∏è‚É£ Importando scheduler...');
    const schedulerService = require('./backend/schedulerService');
    console.log('‚úÖ Scheduler importado correctamente');

    // Probar funci√≥n de verificaci√≥n
    console.log('\n2Ô∏è‚É£ Ejecutando verificaci√≥n manual...');
    const resultado = await schedulerService.runValidationsOnce();
    console.log('‚úÖ Verificaci√≥n ejecutada:', resultado);

    // Mostrar estado del scheduler
    console.log('\n3Ô∏è‚É£ Estado del scheduler:');
    const estado = schedulerService.getSchedulerStatus();
    console.log(estado);

    console.log('\nüéâ SCHEDULER FUNCIONANDO CORRECTAMENTE');

  } catch (error) {
    console.error('‚ùå Error probando scheduler:', error.message);
  }
}

async function activarProduccion() {
  console.log('üöÄ CONFIGURANDO PARA PRODUCCI√ìN...\n');

  console.log('üìã LISTA DE VERIFICACI√ìN PARA PRODUCCI√ìN:');
  console.log('');
  
  console.log('‚úÖ 1. VARIABLES DE ENTORNO EN RAILWAY:');
  console.log('   - MERCADOPAGO_ACCESS_TOKEN (token de producci√≥n)');
  console.log('   - MERCADOPAGO_PUBLIC_KEY (key de producci√≥n)');
  console.log('   - ENABLE_SUBSCRIPTION_SCHEDULER=true');
  console.log('');

  console.log('‚úÖ 2. WEBHOOKS EN MERCADOPAGO:');
  console.log(`   - Pagos: ${process.env.BACKEND_URL}/api/mercadopago/webhook`);
  console.log(`   - Suscripciones: ${process.env.BACKEND_URL}/api/mercadopago/subscription-webhook`);
  console.log('');

  console.log('‚úÖ 3. VERIFICAR DEPLOYMENT:');
  console.log('   - El scheduler se iniciar√° autom√°ticamente en Railway');
  console.log('   - Verificar logs: "‚úÖ Scheduler de suscripciones autom√°ticas iniciado"');
  console.log('');

  console.log('‚úÖ 4. MONITOREO:');
  console.log('   - Logs de cobros: "üí≥ Procesando pago autom√°tico"');  
  console.log('   - Logs de webhooks: "üîî Webhook de suscripci√≥n autom√°tica recibido"');
  console.log('');

  console.log('üéØ COMANDOS PARA DEPLOYMENT:');
  console.log('');
  console.log('# Hacer commit de los cambios');
  console.log('git add .');
  console.log('git commit -m "feat: activar sistema de cobro autom√°tico"');
  console.log('git push origin main');
  console.log('');
  console.log('# Railway har√° deploy autom√°ticamente');
  console.log('# Verificar en Railway logs que aparezca:');
  console.log('# "‚úÖ Scheduler de suscripciones autom√°ticas iniciado"');
  console.log('');

  console.log('üö® IMPORTANTE:');
  console.log('- Usar tokens de PRODUCCI√ìN de MercadoPago');
  console.log('- Configurar webhooks con URLs de PRODUCCI√ìN');
  console.log('- Probar con un usuario real antes de lanzar');
}

// Ejecutar script
main().catch(console.error); 